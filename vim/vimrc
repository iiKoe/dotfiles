" URL: None
" Author: Vito Kortbeek
" Description: A vim configguration file for use commandline
"              usage and gui (secundary)..

"------------------------------------------------------------
"--------------------- Vundle plugin manager ----------------
"------------------------------------------------------------

set nocompatible    " No vi compatibility
filetype off        " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Examples
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"

"------------------------------------------------------------
"--------------------- Plugins ------------------------------
"------------------------------------------------------------

" TODO
" snipmate

" ctrlp.vim
" https://github.com/ctrlpvim/ctrlp.vim
Plugin 'ctrlpvim/ctrlp.vim'

" NERDTree
" https://github.com/scrooloose/nerdtree
Plugin 'scrooloose/nerdtree'

" syntastic
" https://github.com/vim-syntastic/syntastic
Plugin 'vim-syntastic/syntastic'

" taglist.vim
" https://www.vim.org/scripts/script.php?script_id=273
Plugin 'taglist.vim'

" vim-easymotion
" https://github.com/easymotion/vim-easymotion
Plugin 'easymotion/vim-easymotion'

" bufexplorer
" https://github.com/jlanzarotta/bufexplorer
Plugin 'jlanzarotta/bufexplorer'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


"------------------------------------------------------------
"--------------------- General Cofiguration -----------------
"------------------------------------------------------------
" Automatic reaload of vimrc
autocmd! bufwritepost vimrc source %

" Rebind <Leader> key
"let mapleader = ","
let mapleader = "\<Space>"

" Enable syntax highlighting
syntax on

" Switch buffers without saving
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" do incremental searching
set incsearch

" keep 1000 lines of command line history
set history=1000
set undolevels=1000

" show the cursor position all the time
set ruler

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use visual bell instead of beeping when doing something wrong
"set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=


"------------------------------------------------------------
"------------------------ TAB settings ----------------------
"------------------------------------------------------------
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab

"autocmd FileType c,cpp,h setlocal expandtab shiftwidth=4 softtabstop=4 smarttab 
"autocmd FileType asm,s,S setlocal expandtab shiftwidth=8 softtabstop=8 smarttab 


"------------------------------------------------------------
"------------------------ Mappings --------------------------
"------------------------------------------------------------
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
"nnoremap <C-R> :nohl<CR><C-L>
map <Leader>r :nohl<CR><C-L>

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes until the indent
inoremap <C-U> <C-G>u<C-U>

" Tab navigation
:nnoremap <Tab> :tabn<CR>
:nnoremap <S-Tab> :tabp<CR>

" Split movement
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv
vnoremap > >gv

" Toggle between 'paste' and 'nopaste'
nnoremap <silent> <leader>p :call SystemClipboardToggle()<cr>
let g:system_clipboard_mode = 0
function! SystemClipboardToggle()
    if g:system_clipboard_mode == 0
        set paste
        "set clipboard=unnamedplus
        set clipboard^=unnamedplus
        let g:system_clipboard_mode = 1
    else
        set nopaste
        set clipboard-=unnamedplus
        let g:system_clipboard_mode = 0
    endif
endfunction


"------------------------------------------------------------
"------------------------ Potential settings ----------------
"------------------------------------------------------------
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
  set mousemodel=popup
endif

if has('cscope')
  set cscopequickfix=s-,d-,c-,t-,e-,i-
endif

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" remove 'T' flag from 'guioptions': no toolbar
if  has('gui_running')
  set guioptions-=tT
endif

"------------------------------------------------------------
"------------------------ Handy settings --------------------
"------------------------------------------------------------
" show trailing whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" Trim trailing spaces on buf write
autocmd BufWritePre *.[ch]
      \ execute "normal! m'" |
      \ %substitute/ \+$//e |
      \ execute "normal! g`'"

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Brace matching (auto)
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}

" Search text under cursor
vnoremap <silent> * <ESC>/<C-R>=escape(l9#getSelectedText(),'\.$*^/')<CR>/<CR>
vnoremap <silent> # <ESC>?<C-R>=escape(l9#getSelectedText(),'\.$*^?')<CR>?<CR>


"------------------------------------------------------------
"------------------------ Visual ----------------------------
"------------------------------------------------------------

" Toggle the color scheme between dark and light

set t_Co=256
set background=dark
colorscheme molokai

let g:color_scheme_dark = 1
nnoremap <Leader>c :call ThemeToggle()<cr>

" Change the theme
function! ThemeToggle()
    if g:color_scheme_dark
        set t_Co=256
        set background=light
        colorscheme pastella

	    let g:color_scheme_dark = 0
    else
        set t_Co=256
        set background=dark
        colorscheme molokai

	    let g:color_scheme_dark = 1
    endif
endfunction

" Color column
let &colorcolumn="81"

"------------------------------------------------------------
" The sulution below for 256color in tmux and screen also works for termite
" Does not seem to have negative effects so did not write a 'termite' check
""
" https://sunaku.github.io/vim-256color-bce.html
" Disable Background Color Erase (BCE) so that color schemes
" work properly when Vim is used inside tmux and GNU screen.
set t_ut=


"------------------------------------------------------------
"------------------------ Plugin Configuration --------------
"------------------------------------------------------------
"-- Taglist plugin
"""filetype plugin on
let Tlist_Use_Right_Window = 1
:nnoremap <Leader>L :TlistToggle<CR>

"-- NERDTree plugin
:nnoremap <Leader>N :NERDTreeToggle<CR>

" Configure python lint for pymode
let g:pymode_options_max_line_length = 159
let g:pymode_folding = 0

" easymotion config
map <Leader> <Plug>(easymotion-prefix)
map <Leader>s <Plug>(easymotion-s2)
map <Leader>t <Plug>(easymotion-t2)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_smartcase = 1

" syntastic config
let g:syntastic_mode_map = { "mode": "active",
            \ "active_filetypes": [],
            \ "passive_filetypes": ["python"] }

