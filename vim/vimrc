" URL: None
" Author: Vito Kortbeek
" Description: A vim configguration file for use commandline
"              usage and gui (secundary)..

"------------------------------------------------------------
"--------------------- General Cofigurations ----------------
"------------------------------------------------------------
" Automatic reaload of vimrc
autocmd! bufwritepost vimrc source %

" Rebind <Leader> key
"let mapleader = ","
let mapleader = "\<Space>"

" No vi compatibility
set nocompatible

" Attempt to determine the type of a file based on its name addnd possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" Enable syntax highlighting
syntax on

" Switch buffers without saving
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" do incremental searching
set incsearch

" keep 50 lines of command line history
set history=1000
set undolevels=1000

" show the cursor position all the time
set ruler

" display incomplete commands
set showcmd

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use visual bell instead of beeping when doing something wrong
"set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F3>

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab

" show whitespace
" MUST be inserted BEFORE the colorscheme command
"autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
"au InsertLeave * match ExtraWhitespace /\s\+$/

autocmd FileType c,cpp,h setlocal expandtab shiftwidth=4 softtabstop=4 smarttab 
autocmd FileType asm,s,S setlocal expandtab shiftwidth=8 softtabstop=8 smarttab 
"autocmd FileType vhdl setlocal expandtab shiftwidth=2 softtabstop=2
"autocmd FileType vim setlocal expandtab shiftwidth=2 softtabstop=4 smarttab
"autocmd FileType php setlocal expandtab shiftwidth=4 softtabstop=4

"------------------------------------------------------------
"------------------------ Mappings --------------------------
"------------------------------------------------------------
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
"nnoremap <C-R> :nohl<CR><C-L>
map <Leader>r :nohl<CR><C-L>

" Don't use Ex mode, use Q for formatting
"map Q gq

" CTRL-U in insert mode deletes a lot.
inoremap <C-U> <C-G>u<C-U>

"-- switch buffers
":nnoremap <Tab> :bnext<CR>
":nnoremap <S-Tab> :bprevious<CR>

" bindnd Ctrl+<movement> keys to move around the windows,
" instead of using Ctrl+w + <movement>
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv
vnoremap > >gv

"------------------------------------------------------------
"------------------------ Potential settings ----------------
"------------------------------------------------------------
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
  set mousemodel=popup
endif

if has("cscope")
  set cscopequickfix=s-,d-,c-,t-,e-,i-
endif

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" remove 'T' flag from 'guioptions': no toolbar
if  has("gui_running")
  set guioptions-=tT
endif

"------------------------------------------------------------
"------------------------ Handy settings --------------------
"------------------------------------------------------------
" Trim trailing spaces on buf write
autocmd BufWritePre *.[ch]
      \ execute "normal! m'" |
      \ %substitute/ \+$//e |
      \ execute "normal! g`'"

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

"-- Brace matching (auto)
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}

"color torte
vnoremap <silent> * <ESC>/<C-R>=escape(l9#getSelectedText(),'\.$*^/')<CR>/<CR>
vnoremap <silent> # <ESC>?<C-R>=escape(l9#getSelectedText(),'\.$*^?')<CR>?<CR>

"------------------------------------------------------------
"------------------------ Visual ----------------------------
"------------------------------------------------------------
" I Could not find a propper way with using terminator.
let g:color_scheme_select = 1
if (has("gui_running") || g:color_scheme_select == 1)
  "let g:solarized_termcolors=256
  "let g:solarized_termtrans=1
  set t_Co=256
  set background=dark
  "colorscheme solarized
  colorscheme molokai
  let g:color_scheme_select = 1
  nnoremap <F12> :call ChangeThemeToggle()<cr>
endif

"-- Color column
let &colorcolumn="81"

"------------------------------------------------------------
"------------------------ Plugins ---------------------------
"------------------------------------------------------------
" Enable Pathogen plugin
call pathogen#infect()

"-- Taglist plugin
filetype plugin on
let Tlist_Use_Right_Window = 1
:nnoremap <Leader>L :TlistToggle<CR>

"-- NERDTree plugin
:nnoremap <Leader>N :NERDTreeToggle<CR>

:nnoremap <Leader>m :make<CR>
:nnoremap <Leader>p :make prog<CR>

" Configure python lint for pymode
let g:pymode_options_max_line_length = 159
let g:pymode_folding = 0

" easymotion config
map <Leader> <Plug>(easymotion-prefix)
map <Leader>s <Plug>(easymotion-s2)
map <Leader>t <Plug>(easymotion-t2)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_smartcase = 1

" syntastic config
let g:syntastic_mode_map = { "mode": "active",
            \ "active_filetypes": [],
            \ "passive_filetypes": ["python"] }

"------------------------------------------------------------
"------------------------ Functions -------------------------
"------------------------------------------------------------
" Change the theme
function! ChangeThemeToggle()
    if g:color_scheme_select == 1
        colorscheme solarized
        set background=dark
	let g:color_scheme_select = 2
	echo "Solarized Theme"
    else
        colorscheme molokai
	let g:color_scheme_select = 1
	echo "Molokai Theme"
    endif
endfunction

